#!/usr/bin/env python2
# xcor 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# See https://wiki.dnanexus.com/Developer-Portal for documentation and
# tutorials on how to modify this file.
#
# DNAnexus Python Bindings (dxpy) documentation:
#   http://autodoc.dnanexus.com/bindings/python/current/

import subprocess
import shlex
from multiprocessing import cpu_count
import dxpy
import common
import logging
import sys

logger = logging.getLogger(__name__)
logger.addHandler(dxpy.DXLogHandler())
logger.propagate = False
logger.setLevel(logging.INFO)


class InputException(Exception):
    pass


def xcor_parse(fname):
    with open(fname, 'r') as xcor_file:
        if not xcor_file:
            return None

        lines = xcor_file.read().splitlines()
        line = lines[0].rstrip('\n')
        # CC_SCORE FILE format:
        #   Filename <tab>
        #   numReads <tab>
        #   estFragLen <tab>
        #   corr_estFragLen <tab>
        #   PhantomPeak <tab>
        #   corr_phantomPeak <tab>
        #   argmin_corr <tab>
        #   min_corr <tab>
        #   phantomPeakCoef <tab>
        #   relPhantomPeakCoef <tab>
        #   QualityTag

        headers = ['Filename',
                   'numReads',
                   'estFragLen',
                   'corr_estFragLen',
                   'PhantomPeak',
                   'corr_phantomPeak',
                   'argmin_corr',
                   'min_corr',
                   'phantomPeakCoef',
                   'relPhantomPeakCoef',
                   'QualityTag']
        metrics = line.split('\t')
        headers.pop(0)
        metrics.pop(0)

        xcor_qc = dict(zip(headers, metrics))
    return xcor_qc


def single_true(iterable):
    i = iter(iterable)
    return any(i) and not any(i)


def map_for_xcor(input_fastq):
    return "se_50_filename"


@dxpy.entry_point('main')
def main(paired_end, Nreads, input_bam=None, input_fastq=None, input_tagAlign=None):

    if not any([input_bam, input_fastq, input_tagAlign]):
        logger.error("No input specified")
        raise InputException("At least one input is required")

    if not single_true([input_bam, input_fastq, input_tagAlign]):
        logger.error("Multiple inputs specified")
        raise InputException("Only one input is allowed")

    if (input_bam or input_tagAlign) and paired_end:
        logger.error("Cross-correlation analysis is not supported for paired_end mapping.  Supply read1 fastq instead.")
        raise InputException("Paired-end input is not allowed")

    if input_tagAlign:
        input_tagAlign_file = dxpy.DXFile(input_tagAlign)
        input_tagAlign_filename = input_tagAlign_file.name
        intermediate_TA_filename = input_tagAlign_file.name.rstrip('.gz')
        dxpy.download_dxfile(input_tagAlign_file.get_id(), input_tagAlign_filename)
        # ===================
        # Unzip tagAlign file
        # ===================
        out, err = common.run_pipe([
            "gzip -dc %s" % (input_tagAlign_filename)],
            outfile=intermediate_TA_filename)
    elif input_bam:
        input_bam_file = dxpy.DXFile(input_bam)
        input_bam_filename = input_bam_file.name
        input_bam_basename = input_bam_file.name.rstrip('.bam')
        intermediate_TA_filename = input_bam_basename + '.tagAlign'
        dxpy.download_dxfile(input_bam_file.get_id(), input_bam_filename)
        # ===================
        # Create tagAlign file
        # ===================
        out, err = common.run_pipe([
            "bamToBed -i %s" % (input_bam_filename),
            r"""awk 'BEGIN{OFS="\t"}{$4="N";$5="1000";print $0}'"""],
            outfile=intermediate_TA_filename)
    elif input_fastq:
        intermediate_TA_filename = map_for_xcor(input_fastq)

    # =================================
    # Subsample tagAlign file
    # ================================
    input_TA_basename = intermediate_TA_filename.rstrip('.tagAlign')
    logger.info(
        "Subsampling from tagAlign file %s with md5 %s"
        % (intermediate_TA_filename, common.md5(intermediate_TA_filename)))
    sample_from_filename = intermediate_TA_filename
    subsampled_TA_filename = \
        input_TA_basename + \
        ".%d.tagAlign.gz" % (Nreads/1000000)
    steps = [
        'grep -v "chrM" %s' % (sample_from_filename),
        'shuf -n %d --random-source=%s' % (Nreads, sample_from_filename),
        'gzip -cn']
    out, err = common.run_pipe(steps, outfile=subsampled_TA_filename)
    logger.info(
        "Subsampled tA md5: %s" % (common.md5(subsampled_TA_filename)))

    # Calculate Cross-correlation QC scores
    CC_scores_filename = subsampled_TA_filename + ".cc.qc"
    CC_plot_filename = subsampled_TA_filename + ".cc.plot.pdf"

    # CC_SCORE FILE format
    # Filename <tab>
    # numReads <tab>
    # estFragLen <tab>
    # corr_estFragLen <tab>
    # PhantomPeak <tab>
    # corr_phantomPeak <tab>
    # argmin_corr <tab>
    # min_corr <tab>
    # phantomPeakCoef <tab>
    # relPhantomPeakCoef <tab>
    # QualityTag

    run_spp_command = '/phantompeakqualtools/run_spp.R'
    out, err = common.run_pipe([
        "Rscript %s -c=%s -p=%d -filtchr=chrM -savp=%s -out=%s"
        % (run_spp_command, subsampled_TA_filename, cpu_count(),
           CC_plot_filename, CC_scores_filename)])
    out, err = common.run_pipe([
        r"""sed -r  's/,[^\t]+//g' %s""" % (CC_scores_filename)],
        outfile="temp")
    out, err = common.run_pipe([
        "mv temp %s" % (CC_scores_filename)])

    CC_scores_file = dxpy.upload_local_file(CC_scores_filename)
    CC_plot_file = dxpy.upload_local_file(CC_plot_filename)
    xcor_qc = xcor_parse(CC_scores_filename)

    # Return the outputs
    output = {
        "CC_scores_file": dxpy.dxlink(CC_scores_file),
        "CC_plot_file": dxpy.dxlink(CC_plot_file),
        "paired_end": paired_end,
        "RSC": float(xcor_qc.get('relPhantomPeakCoef')),
        "NSC": float(xcor_qc.get('phantomPeakCoef')),
        "est_frag_len": float(xcor_qc.get('estFragLen'))
    }
    return output


dxpy.run()
